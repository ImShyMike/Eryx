{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Eryx documentation","text":"<p>Eryx is simple and easy to use programming language based on python/javascript that was made to be easy to learn and use.</p> <p>Dynamic Typing in Eryx</p> <p>Eryx is a dynamically typed language. This means variables can change their type during runtime.</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>Install the latest version of Eryx with pip:</p> <pre><code>pip install eryx\n</code></pre>"},{"location":"#running-eryx","title":"Running Eryx","text":"<p>After installing Eryx, you can use it with the following command:</p> <pre><code>eryx\n</code></pre> <p>Subcommands:</p> <ul> <li>repl: Start the REPL</li> <li>run: Run an Eryx file</li> <li>server: Start the web IDE</li> <li>test: Run the test suite</li> </ul>"},{"location":"#writing-your-first-program","title":"Writing your first program","text":"<p>Before writing your first program, you should head over to the language features page to understand how to use the language and what it is capable of. You should also check out the examples page as it provides a wide range of examples that cover all the features of the language.</p> <p>Here is a simple factorial implementation in Eryx: factorial.eryx<pre><code># This is a comment!\nfunc factorial(n) {\n    if (n &lt;= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nprint(factorial(5))\n</code></pre></p> Output <pre><code>120\n</code></pre>"},{"location":"cli/","title":"Using the CLI","text":"<p>The CLI is where all the eryx functionality is. With it you can run programs, start the REPL, start the web IDE and run the all of the current version's tests.</p>"},{"location":"cli/#check-the-current-installed-version","title":"Check the current installed version","text":"<p>To run a check what version of Eryx you have installed, simply use: <pre><code>eryx --version\n# Eryx, version 0.1.3\n</code></pre></p>"},{"location":"cli/#running-a-program","title":"Running a program","text":"<p>To run a program use: <pre><code>eryx run &lt;filepath&gt;\n</code></pre> Supported debug arguments are:</p> <ul> <li>--tokenize: Print the tokenized code</li> <li>--ast: Print the AST (Abstract Syntax Tree)</li> <li>--result: Print the result of the code evaluation</li> </ul>"},{"location":"cli/#starting-the-repl","title":"Starting the repl","text":"<p>To start the Eryx REPL (Read-Eval-Print-Loop) use: <pre><code>eryx repl\n</code></pre></p> <p>This will start an interactive shell that you can use to run Eryx code: <pre><code>Eryx v0.1.3\n&gt;\n</code></pre></p> <p>To exit the REPL use either <code>CTRL + C</code> or use the command <code>exit()</code>.</p> <p>Supported debug arguments are:</p> <ul> <li>--tokenize: Print the tokenized code</li> <li>--ast: Print the AST</li> <li>--result: Print the result of the code evaluation</li> </ul>"},{"location":"cli/#starting-the-web-ide","title":"Starting the web IDE","text":"<p>The web IDE can be used to run programs or use the REPL directly from your browser. To start it use:</p> <p><pre><code>eryx server [--ip (\"0.0.0.0\")] [--port (80)] [--no-file-io]\n</code></pre> (--no-file-io disables file read/write/append and file importing) Default ip is <code>0.0.0.0</code> (all available network interfaces) and the default port is <code>80</code>.</p>"},{"location":"cli/#running-the-tests","title":"Running the tests","text":"<p>Eryx uses pytest for handling and running tests to make sure the language is working as expected. To run said tests use:</p> <pre><code>eryx test\n</code></pre>"},{"location":"examples/","title":"Eryx examples","text":"<p>This page contains many example programs made using eryx and their corresponding output.</p>"},{"location":"examples/#simple-examples","title":"Simple examples","text":""},{"location":"examples/#variables","title":"Variables","text":"variables.eryx<pre><code>let a = 1;\nlet b = -2;\nlet c = 3.14;\nlet d = a;\nlet e = \"Hello, World!\";\nlet f = true;\nlet g = null;\nlet h = [1, 2, 3];\nlet i = {key: \"value\", num: 10};\n\nprint(a)\nprint(b)\nprint(c)\nprint(d)\nprint(e)\nprint(f)\nprint(g)\nprint(h)\nprint(i)\n</code></pre> Output <pre><code>1\n-2\n3.14\n1\nHello, World!\ntrue\nnull\n[ 1, 2, 3 ]\n{ key: \"value\", num: 10 }\n</code></pre>"},{"location":"examples/#importing","title":"Importing","text":"functions.eryx<pre><code>### math.eryx\nfunc add(x, y) {\n    return x + y;\n}\n\nconst one = 1;\nconst pi = 22 / 7;\n\n\n### test.eryx\nimport \"math\"\nfrom \"math\" import [\"add\", \"pi\"]\n\nprint(add(5, 10), pi)\nprint(math.one)\n</code></pre> Output <pre><code>15 3.142857142857143\n1\n</code></pre>"},{"location":"examples/#functions","title":"Functions","text":"functions.eryx<pre><code>func add(x, y) {\n    return x + y;\n}\n\nprint(add(1, 2))\n</code></pre> Output <pre><code>3\n</code></pre>"},{"location":"examples/#ifelse-statements","title":"If/Else statements","text":"if_else.eryx<pre><code>let x = 10;\nlet y = 5;\n\nif (x == y) {\n    print(\"x is equal y\")\n} else {\n    print(\"x is not equal y\")\n}\n</code></pre> Output <pre><code>x is not equal y\n</code></pre>"},{"location":"examples/#arithmetic-operations","title":"Arithmetic operations","text":"arithmetic.eryx<pre><code>let x = 10;\nlet y = 5;\n\nprint(x + y)\nprint(x - y)\nprint(x * y)\nprint(x / y)\nprint(x % y)\nprint(x + y * 2 + x * (y + 2) - 5)\n</code></pre> Output <pre><code>15\n5\n50\n2\n0\n85\n</code></pre>"},{"location":"examples/#comparison-operations","title":"Comparison operations","text":"comparisons.eryx<pre><code>let x = 10;\nlet y = 5;\n\nprint(x == y)\nprint(x != y)\nprint(x &lt; y)\nprint(x &gt; y)\nprint(x &lt;= y)\nprint(x &gt;= y)\n</code></pre> Output <pre><code>false\ntrue\nfalse\ntrue\nfalse\ntrue\n</code></pre>"},{"location":"examples/#complex-examples","title":"Complex examples","text":""},{"location":"examples/#factorial","title":"Factorial","text":"<p>Calculate the factorial of a number. factorial.eryx<pre><code>func factorial(n) {\n    if (n &lt;= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nprint(factorial(5))\n</code></pre></p> Output <pre><code>120\n</code></pre>"},{"location":"examples/#fibonacci","title":"Fibonacci","text":"<p>Calculate the nth Fibonacci number. fibonacci.eryx<pre><code>func fibonacci(n) {\n    if (n &lt;= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nprint(fibonacci(10))\n</code></pre></p> Output <pre><code>55\n</code></pre>"},{"location":"examples/#gcd","title":"GCD","text":"<p>Find the greatest common divisor of two numbers using Euclid's algorithm. gcd.eryx<pre><code>func gcd(a, b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\nprint(gcd(48, 18))\n</code></pre></p> Output <pre><code>6\n</code></pre>"},{"location":"examples/#prime-check","title":"Prime Check","text":"<p>Check if a number is a prime number. is_prime.eryx<pre><code>func isPrime(n, divisor) {\n    if (n &lt;= 1) {\n        return false;\n    }\n    if (divisor == 1) {\n        return true;\n    }\n    if (n % divisor == 0) {\n        return false;\n    }\n    return isPrime(n, divisor - 1);\n}\n\nlet number = 17;\nprint(isPrime(number, int(number ** 0.5)))\n</code></pre></p> Output <pre><code>true\n</code></pre>"},{"location":"examples/#offset-adder","title":"Offset adder","text":"<p>Create an adder with an offset then use it. adder.eryx<pre><code>func makeAdder(offset) {\n    func add(x, y) {\n        return x + y + offset;\n    }\n\n    return add;\n}\n\nlet adder = makeAdder(10);\nprint(adder(5, 10))\n</code></pre></p> Output <pre><code>25\n</code></pre>"},{"location":"examples/#sum-digits","title":"Sum digits","text":"<p>Sum all digits of a number. sum_digits.eryx<pre><code>func sumOfDigits(n) {\n    if (n == 0) {\n        return 0;\n    }\n    return (n % 10) + sumOfDigits(int(n / 10));\n}\n\nprint(sumOfDigits(12345))\n</code></pre></p> Output <pre><code>15\n</code></pre>"},{"location":"examples/#reverse-number","title":"Reverse number","text":"<p>Reverse the digits of a number. reverse_number.eryx<pre><code>func reverseNumber(n, reversed) {\n    if (n == 0) {\n        return reversed;\n    }\n    reversed = reversed * 10 + (n % 10)\n    return reverseNumber(int(n / 10), reversed);\n}\n\nprint(reverseNumber(12345, 0))\n</code></pre></p> Output <pre><code>54321\n</code></pre>"},{"location":"examples/#is-sorted","title":"Is sorted","text":"<p>Check if a list is sorted. is_sorted.eryx<pre><code>func isSorted(arr, idx) {\n    if (idx == 0) {\n        return true;\n    }\n    if (arr[idx] &lt; arr[idx - 1]) {\n        return false;\n    }\n    return isSorted(arr, idx - 1);\n}\n\nlet nums = [1, 2, 3, 4, 5];\nprint(isSorted(nums, len(nums) - 1))\n</code></pre></p> Output <pre><code>true\n</code></pre>"},{"location":"getting-started/","title":"Installation","text":""},{"location":"getting-started/#installing-eryx","title":"Installing Eryx","text":"<p>Before installing Eryx, you need to make sure you have Python and pip installed and working. You can verify it with the following commands:</p> <pre><code>python --version\n# Python 3.12.6\npip --version\n# pip 24.3.1\n</code></pre> <p>Python version</p> <p>The Python version must be above 3.10.0</p> <p>Installing and verifying the installation is as simple as: <pre><code>pip install eryx &amp;&amp; eryx --version\n# Eryx, version 0.1.3\n</code></pre></p>"},{"location":"getting-started/#interacting-with-the-cli","title":"Interacting with the CLI","text":"<p>The CLI can be used with the command: <pre><code>eryx\n</code></pre> The CLI is used to do everything within the language, as explained here.</p>"},{"location":"language-features/","title":"Language features","text":"<p>Eryx supports a wide range of features that are also present in other languages like python/javascript. Bellow are of all features currently supported by Eryx.</p>"},{"location":"language-features/#comments","title":"Comments","text":"<p>Single line comments are supported with the <code>#</code> character and can be stopped early with the <code>;</code> character. <pre><code>print(\"Hello,\") # This is a comment print(\"This will not be printed\")\nprint(\"World!\") # This is also a comment ; print(\"This will be printed\")\n</code></pre></p> <p>Stopping line comments</p> <p>The <code>;</code> above makes it so the code after it is also executed, making the output:</p> <pre><code>Hello,\nWorld!\nThis will be printed\n</code></pre>"},{"location":"language-features/#variable-declarations","title":"Variable declarations","text":"<p>Mutable variables and constants are supported. <pre><code>let var = 1; # This is a mutable variable\nconst constant = true; # This is a constant\nvar = 100 # Redefining a variable's value does not need a semicolon\n</code></pre></p> <p>Semicolon usage</p> <p>All variable declarations must end in a semicolon (<code>;</code>)</p>"},{"location":"language-features/#value-types","title":"Value types","text":"<p>All currently suppoted value types are:</p> <ul> <li>Numbers (currently there isn't a differnce between integers and floats)</li> <li>Strings</li> <li>Booleans</li> <li>Arrays</li> <li>Dictionaries/Objects</li> <li>Nulls</li> </ul> <pre><code>let num = 1; # This is a number\nlet neg_num = -1; # This is a negative number\nlet float_num = 3.14; # This is a float\nlet boolean = true; # This is a boolean\nlet string = \"Hello, World!\"; # This is a string\nlet arr = [1, 2, 3, 5]; # This is an array\nlet dict = {key: \"value\", num: 3} # This is a dictionary/object\nlet null_val = null; # This is a null\n</code></pre>"},{"location":"language-features/#importing","title":"Importing","text":"<p>Importing is done with the <code>import</code> keyword.</p> <pre><code>import \"test.erx\" # Imports a file name 'test.eryx'\nfrom \"test.eryx\" import [\"add\", \"pi\"] # Imports the function 'add' and variable 'pi' from 'test.eryx'\nimport \"math\" as \"meth\" # Imports the builtin 'math' module as 'meth'\n</code></pre> <p>Builtins</p> <p>Builtin modules are imported without the \".eryx\" (example: \"math\")</p>"},{"location":"language-features/#functions","title":"Functions","text":"<p>Functions can be declared using the <code>func</code> keyword.</p> <pre><code>func add(x, y) {\n    return x + y; # Return statements must end in a semicolon\n}\nprint(add(1, 2)) # Output: 3\n</code></pre> <p>There are also many builtin functions:</p> <p>Values</p> <p>Values containing '?' are optional and '...' reffers to any amount of arguments.</p> <ul> <li>print( ... ): Print all values passed to it</li> <li>input( text? ): Get user input as a string, optionally prompt with a message</li> <li>len( item ): Get the length of a string, array, or object</li> <li>exit( code? ): Exit the program, optionally with a status code</li> <li>str( value? ): Convert a value to its string representation</li> <li>int( value? ): Convert a value to an integer</li> <li>bool( value? ): Convert a value to a boolean</li> <li>array( ... or string ): Create a new array from the given values or turn a string into an array</li> <li>type( value ): Get the type of the given value</li> </ul> <p>There are also many builtin modules:</p> <ul> <li>time:</li> <li>time(): Get the current time in seconds since the Epoch</li> <li>math:</li> <li>sum( array ): Get the sum of an array of numbers</li> <li>round( number, n? ): Round a number to the n'th decimal place (default 0)</li> <li>min( array ): Get the minimum value from an array of numbers</li> <li>max( array ): Get the maximum value from an array of numbers</li> <li>random(): Get a random number between 0 and 1</li> <li>pi: The value for pi</li> <li>file:</li> <li>read( filename ): Read the contents of a file as a string</li> <li>write( filename, text ): Write to a file</li> <li>append( filename, text ): Append to the contents of a file</li> <li>http: (WIP)</li> <li>get( url ): Send a get request to a url</li> <li>post( url, data ): Send a post request with json data as a string to a url</li> </ul>"},{"location":"language-features/#operators","title":"Operators","text":"<p>Currently, all supported operators are:</p>"},{"location":"language-features/#arithmetic","title":"Arithmetic","text":"<ul> <li>+ Add</li> <li>- Subtract</li> <li>* Multiply</li> <li>/ Divide</li> <li>% Modulo</li> <li>** Power</li> </ul>"},{"location":"language-features/#comparison","title":"Comparison","text":"<ul> <li>== Equals</li> <li>!= Not equals</li> <li>&lt; Smaller</li> <li>&gt; Greater</li> <li>&lt;= Smaller or equal</li> <li>&gt;= Greater or equal</li> </ul> <p>+ Operator</p> <p>The <code>+ (Add)</code> operator can also be used to concatenate strings, arrays and dictionaries/objects.</p>"},{"location":"language-features/#control-structures","title":"Control structures","text":"<p>For now, the only supported control structures are:</p> <pre><code>if (1 == 1) {\n    print(\"This will be printed\")\n} else {\n    print(\"This will not be printed\")\n}\n</code></pre>"}]}