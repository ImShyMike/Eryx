{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Eryx documentation","text":"<p>Eryx is simple and easy to use programming language based on python/javascript that was made to be easy to learn and use.</p> <p>Dynamic Typing in Eryx</p> <p>Eryx is a dynamically typed language. This means variables can change their type during runtime.</p>"},{"location":"#useful-urls","title":"Useful urls","text":"<ul> <li> Homepage</li> <li> GitHub Repository</li> <li> Package Index</li> <li> Online IDE</li> <li> PyPI Package</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<p>Install the latest version of Eryx with pip:</p> <pre><code>pip install eryx\n</code></pre>"},{"location":"#using-eryx","title":"Using Eryx","text":"<p>After installing Eryx, you can use it with the following command:</p> <pre><code>eryx\n\nAvailable commands:\n    repl                Start the REPL\n    run                 Run an Eryx file\n    server              Start the web IDE\n    test                Run the test suite~\n    transpile           Transpile Eryx code\n    package             Manage Eryx packages\n</code></pre> <p>Head over to the CLI page for more details on how to use each command.</p>"},{"location":"#writing-your-first-program","title":"Writing your first program","text":"<p>Before writing your first program, you should head over to the language features page to understand how to use the language and what it is capable of. You should also check out the examples page as it provides a wide range of examples that cover all the features of the language.</p> <p>Here is a simple factorial implementation in Eryx:</p> factorial.eryx<pre><code># This is a comment!\nfunc factorial(n) {\n    if (n &lt;= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nprint(factorial(5));\n</code></pre> Output <pre><code>120\n</code></pre>"},{"location":"cli/","title":"Using the CLI","text":"<p>The CLI is where all the eryx functionality is. With it you can run programs, start the REPL, start the web IDE, run the all of the current version's tests, transpile code into Python and manage packages.</p> <pre><code>eryx [--version]\n\nAvailable commands:\n    repl                Start the REPL\n    run                 Run an Eryx file\n    server              Start the web IDE\n    test                Run the test suite\n    transpile           Transpile Eryx code\n    package             Manage Eryx packages\n</code></pre>"},{"location":"cli/#check-the-current-installed-version","title":"Check the current installed version","text":"<p>To run a check what version of Eryx you have installed, simply use:</p> <pre><code>eryx --version\n# Eryx, version 0.3.3\n</code></pre>"},{"location":"cli/#running-a-program","title":"Running a program","text":"<p>To run a program use:</p> <pre><code>eryx run [--ast] [--result] [--tokenize] &lt;filepath&gt;\n</code></pre> <p>Debug arguments:</p> <ul> <li>--tokenize: Print the tokenized code</li> <li>--ast: Print the AST (Abstract Syntax Tree)</li> <li>--result: Print the result of the code evaluation</li> </ul>"},{"location":"cli/#starting-the-repl","title":"Starting the repl","text":"<p>To start the Eryx REPL (Read-Eval-Print-Loop) use:</p> <pre><code>eryx repl [--ast] [--result] [--tokenize]\n</code></pre> <p>This will start an interactive shell that you can use to run Eryx code:</p> <pre><code>Eryx v0.1.3\n&gt;\n</code></pre> <p>To exit the REPL use either <code>CTRL + C</code> or the command <code>exit()</code>.</p> <p>Debug arguments:</p> <ul> <li>--tokenize: Print the tokenized code</li> <li>--ast: Print the AST</li> <li>--result: Print the result of the code evaluation</li> </ul>"},{"location":"cli/#starting-the-web-ide","title":"Starting the web IDE","text":"<p>The web IDE can be used to run programs or use the REPL directly from your browser. To start it use:</p> <pre><code>eryx server [--ip (\"0.0.0.0\")] [--port (80)] [--no-file-io]\n</code></pre> <p>(--no-file-io disables file read/write/append and file importing) Default ip is <code>0.0.0.0</code> (all available network interfaces) and the default port is <code>80</code>.</p>"},{"location":"cli/#running-the-tests","title":"Running the tests","text":"<p>Eryx uses pytest for handling and running tests to make sure the language is working as expected. To run said tests use:</p> <pre><code>eryx test\n</code></pre>"},{"location":"cli/#transpiling-into-python","title":"Transpiling into Python","text":"<p>To transpile Eryx code Into python code, use the following command:</p> <pre><code>eryx transpile &lt;filepath&gt;\n</code></pre> <p>This will transpile your <code>.eryx</code> file into <code>.py</code>.</p> <p>Transpiling code</p> <p>The code transpiler is currently in beta and may not work sometimes. (please report any bugs here)</p>"},{"location":"cli/#using-the-package-manager","title":"Using the package manager","text":"<p>The package manager is built into the Eryx CLI, using the subcommand <code>package</code>:</p> <pre><code>eryx package &lt;subcommand&gt;\n\nAvailable 'package' commands:\n    install             Install a package\n    uninstall           Uninstall a package\n    list                List all installed packages\n    upload              Upload a package\n    delete              Delete a package\n</code></pre>"},{"location":"cli/#install","title":"install","text":"<p>Install a package:</p> <pre><code>eryx package install [--upgrade] [--server SERVER] &lt;package-name&gt;\n</code></pre> <ul> <li>--upgrade: Upgrades a package if it is already installed (or just install if not present)</li> <li>--server: Change the package repository URL</li> </ul>"},{"location":"cli/#uninstall","title":"uninstall","text":"<p>Uninstall a package:</p> <pre><code>eryx package install &lt;package-name&gt;\n</code></pre>"},{"location":"cli/#list","title":"list","text":"<p>List all installed packages:</p> <pre><code>eryx package list\n</code></pre>"},{"location":"cli/#upload","title":"upload","text":"<p>Upload a package to a package repository:</p> <pre><code>eryx package upload [--server SERVER] &lt;package-name&gt;\n</code></pre> <ul> <li>--server: Change the package repository URL</li> </ul>"},{"location":"cli/#delete","title":"delete","text":"<p>Delete a package from a package repository:</p> <pre><code>eryx package delete [--server SERVER] &lt;package-name&gt;\n</code></pre> <ul> <li>--server: Change the package repository URL</li> </ul> <p>Default package repo</p> <p>The default package repository is https://eryx-packages.shymike.tech.</p>"},{"location":"examples/","title":"Eryx examples","text":"<p>This page contains many example programs made using eryx and their corresponding output.</p>"},{"location":"examples/#simple-examples","title":"Simple examples","text":""},{"location":"examples/#variables","title":"Variables","text":"variables.eryx<pre><code>let a = 1;\nlet b = -2;\nlet c = 3.14;\nlet d = a;\nlet e = \"Hello, World!\";\nlet f = true;\nlet g = null;\nlet h = [1, 2, 3];\nlet i = {key: \"value\", num: 10};\n\nprint(a);\nprint(b);\nprint(c);\nprint(d);\nprint(e);\nprint(f);\nprint(g);\nprint(h);\nprint(i);\n</code></pre> Output <pre><code>1\n-2\n3.14\n1\nHello, World!\ntrue\nnull\n[ 1, 2, 3 ]\n{ key: \"value\", num: 10 }\n</code></pre>"},{"location":"examples/#importing","title":"Importing","text":"<pre><code>### math.eryx\nfunc add(x, y) {\n    return x + y;\n}\n\nconst one = 1;\nconst pi = 22 / 7;\n\n\n### test.eryx\nimport \"math.eryx\";\nfrom \"math.eryx\" import [\"add\", \"pi\"];\n\nprint(add(5, 10), pi);\nprint(math.one);\n</code></pre> Output <pre><code>15 3.142857142857143\n1\n</code></pre>"},{"location":"examples/#functions","title":"Functions","text":"functions.eryx<pre><code>func add(x, y) {\n    return x + y;\n}\n\nprint(add(1, 2));\n</code></pre> Output <pre><code>3\n</code></pre>"},{"location":"examples/#ifelse-statements","title":"If/Else statements","text":"if_else.eryx<pre><code>let x = 10;\nlet y = 5;\n\nif (x == y) {\n    print(\"x is equal y\");\n} else {\n    print(\"x is not equal y\");\n}\n</code></pre> Output <pre><code>x is not equal y\n</code></pre>"},{"location":"examples/#loops","title":"Loops","text":"loops.eryx<pre><code>let value = 0;\nconst threshold = 5;\n\nloop {\n    if (value &gt;= threshold) {\n        break;\n    } else {\n        value = value + 1\n    }\n\n    print(value);\n}\n\nprint(\"done!\");\n\nvalue = 0;\n\nwhile (value &lt; threshold) {\n    value = value + 1\n\n    if (value % 2 != 0) {\n        continue;\n    }\n\n    print(value);\n}\n</code></pre> Output <pre><code>1\n2\n3\n4\n5\ndone!\n2\n4\n</code></pre>"},{"location":"examples/#arithmetic-operations","title":"Arithmetic operations","text":"arithmetic.eryx<pre><code>let x = 10;\nlet y = 5;\n\nprint(x + y);\nprint(x - y);\nprint(x * y);\nprint(x / y);\nprint(x % y);\nprint(x + y * 2 + x * (y + 2) - 5);\n</code></pre> Output <pre><code>15\n5\n50\n2\n0\n85\n</code></pre>"},{"location":"examples/#comparison-operations","title":"Comparison operations","text":"comparisons.eryx<pre><code>let x = 10;\nlet y = 5;\n\nprint(x == y);\nprint(x != y);\nprint(x &lt; y);\nprint(x &gt; y);\nprint(x &lt;= y);\nprint(x &gt;= y);\n</code></pre> Output <pre><code>false\ntrue\nfalse\ntrue\nfalse\ntrue\n</code></pre>"},{"location":"examples/#complex-examples","title":"Complex examples","text":""},{"location":"examples/#factorial","title":"Factorial","text":"<p>Calculate the factorial of a number.</p> factorial.eryx<pre><code>func factorial(n) {\n    if (n &lt;= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nprint(factorial(5));\n</code></pre> Output <pre><code>120\n</code></pre>"},{"location":"examples/#fibonacci","title":"Fibonacci","text":"<p>Calculate the nth Fibonacci number.</p> fibonacci.eryx<pre><code>func fibonacci(n) {\n    if (n &lt;= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nprint(fibonacci(10));\n</code></pre> Output <pre><code>55\n</code></pre>"},{"location":"examples/#gcd","title":"GCD","text":"<p>Find the greatest common divisor of two numbers using Euclid's algorithm.</p> gcd.eryx<pre><code>func gcd(a, b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\nprint(gcd(48, 18));\n</code></pre> Output <pre><code>6\n</code></pre>"},{"location":"examples/#prime-check","title":"Prime Check","text":"<p>Check if a number is a prime number.</p> is_prime.eryx<pre><code>func isPrime(n, divisor) {\n    if (n &lt;= 1) {\n        return false;\n    }\n    if (divisor == 1) {\n        return true;\n    }\n    if (n % divisor == 0) {\n        return false;\n    }\n    return isPrime(n, divisor - 1);\n}\n\nlet number = 17;\nprint(isPrime(number, int(number ** 0.5)));\n</code></pre> Output <pre><code>true\n</code></pre>"},{"location":"examples/#offset-adder","title":"Offset adder","text":"<p>Create an adder with an offset then use it.</p> adder.eryx<pre><code>func makeAdder(offset) {\n    func add(x, y) {\n        return x + y + offset;\n    }\n\n    return add;\n}\n\nlet adder = makeAdder(10);\nprint(adder(5, 10));\n</code></pre> Output <pre><code>25\n</code></pre>"},{"location":"examples/#sum-digits","title":"Sum digits","text":"<p>Sum all digits of a number.</p> sum_digits.eryx<pre><code>func sumOfDigits(n) {\n    if (n == 0) {\n        return 0;\n    }\n    return (n % 10) + sumOfDigits(int(n / 10));\n}\n\nprint(sumOfDigits(12345));\n</code></pre> Output <pre><code>15\n</code></pre>"},{"location":"examples/#reverse-number","title":"Reverse number","text":"<p>Reverse the digits of a number.</p> reverse_number.eryx<pre><code>func reverseNumber(n, reversed) {\n    if (n == 0) {\n        return reversed;\n    }\n    reversed = reversed * 10 + (n % 10);\n    return reverseNumber(int(n / 10), reversed);\n}\n\nprint(reverseNumber(12345, 0));\n</code></pre> Output <pre><code>54321\n</code></pre>"},{"location":"examples/#is-sorted","title":"Is sorted","text":"<p>Check if a list is sorted.</p> is_sorted.eryx<pre><code>func isSorted(arr, idx) {\n    if (idx == 0) {\n        return true;\n    }\n    if (arr[idx] &lt; arr[idx - 1]) {\n        return false;\n    }\n    return isSorted(arr, idx - 1);\n}\n\nlet nums = [1, 2, 3, 4, 5];\nprint(isSorted(nums, len(nums) - 1));\n</code></pre> Output <pre><code>true\n</code></pre>"},{"location":"getting-started/","title":"Installation","text":""},{"location":"getting-started/#installing-eryx","title":"Installing Eryx","text":"<p>Before installing Eryx, you need to make sure you have Python and pip installed and working. You can verify it with the following commands:</p> <pre><code>python --version\n# Python 3.12.6\npip --version\n# pip 24.3.1\n</code></pre> <p>Python version</p> <p>The Python version must be above 3.10.0</p> <p>Installing and verifying the installation is as simple as:</p> <pre><code>pip install eryx &amp;&amp; eryx --version\n# Eryx, version 0.3.6\n</code></pre>"},{"location":"getting-started/#interacting-with-the-cli","title":"Interacting with the CLI","text":"<p>The CLI can accessed via the following command:</p> <pre><code>eryx\n</code></pre> <p>The CLI is used to do everything within the language, as explained here.</p>"},{"location":"language-features/","title":"Language features","text":"<p>Eryx supports a wide range of features that are also present in other languages like python/javascript. Bellow are of all features currently supported by Eryx.</p>"},{"location":"language-features/#comments","title":"Comments","text":"<p>Single line comments are supported with the <code>#</code> character and can be stopped early with the <code>;</code> character.</p> <pre><code>print(\"Hello, \"); # This is a comment print(\"This will not be printed\")\nprint(\"World!\"); # This is also a comment ; print(\"This will be printed\")\n</code></pre> <p>Stopping line comments</p> <p>The <code>;</code> above makes it so the code after it is also executed, making the output:</p> <pre><code>```C linenums=\"1\"\nHello,\nWorld!\nThis will be printed\n```\n</code></pre>"},{"location":"language-features/#variable-declarations","title":"Variable declarations","text":"<p>Mutable variables and constants are supported.</p> <pre><code>let var = 1; # This is a mutable variable\nconst constant = true; # This is a constant\nvar = 100; # Redefining a variable's value does not need a semicolon\n</code></pre> <p>Semicolon usage</p> <p>All variable declarations must end in a semicolon (<code>;</code>)</p>"},{"location":"language-features/#variable-deletion","title":"Variable deletion","text":"<p>Variables can be deleted with the <code>del</code> keyword:</p> <pre><code>const var = 1; # Declare a constant variable\ndel var; # Delete it so it can be redeclared\n</code></pre>"},{"location":"language-features/#value-types","title":"Value types","text":"<p>All currently suppoted value types are:</p> <ul> <li>Numbers (currently there isn't a differnce between integers and floats)</li> <li>Strings</li> <li>Booleans</li> <li>Arrays</li> <li>Dictionaries/Objects</li> <li>Nulls</li> </ul> <pre><code>let num = 1; # This is a number\nlet neg_num = -1; # This is a negative number\nlet float_num = 3.14; # This is a float\nlet boolean = true; # This is a boolean\nlet string = \"Hello, World!\"; # This is a string\nlet arr = [1, 2, 3, 5]; # This is an array\nlet dict = {key: \"value\", num: 3}; # This is a dictionary/object\nlet null_val = null; # This is a null\n</code></pre>"},{"location":"language-features/#importing","title":"Importing","text":"<p>Importing is done with the <code>import</code> keyword.</p> <pre><code>import \"test.erx\"; # Imports a file name 'test.eryx'\nfrom \"test.eryx\" import [\"add\", \"pi\"]; # Imports the function 'add' and variable 'pi' from 'test.eryx'\nimport \"math\" as \"meth\"; # Imports the builtin 'math' module as 'meth'\n</code></pre> <p>Builtins</p> <p>Builtin modules and installed packages are imported without the \".eryx\" (example: \"math\")</p>"},{"location":"language-features/#functions","title":"Functions","text":"<p>Functions can be declared using the <code>func</code> keyword.</p> <pre><code>func add(x, y) {\n    return x + y; # Return statements must end in a semicolon and can be empty\n}\nprint(add(1, 2)); # Output: 3\n</code></pre>"},{"location":"language-features/#builtin-functions","title":"Builtin functions","text":"Function Description print( ... ) -&gt; null Print all values passed to it. input( text?: str ) -&gt; str Get user input as a string, optionally prompt with a message. len( item: str | array | object ) -&gt; number Get the length of a string, array, or object. exit( code?: number ) -&gt; null Exit the program, optionally with a status code. str( value?: any ) -&gt; str Convert a value to its string representation. int( value?: str ) -&gt; number Convert a value to an integer. bool( value?: any ) -&gt; number Convert a value to a boolean. array( ... | string: str ) -&gt; array Create a new array from the given values or turn a string into an array. type( value ) -&gt; str Get the type of the given value. range( start: number, end?: number, step?: number ) -&gt; array Generates an array from start to end with step. <p>Values</p> <p>Values containing '?' are optional and '...' refers to any amount of arguments.</p>"},{"location":"language-features/#builtin-modules","title":"Builtin modules","text":"<p>Builtin modules can be imported using <code>import</code> (without \".eryx\")</p>"},{"location":"language-features/#math","title":"math","text":"Function Description log( x: number, base? ) -&gt; number Get the logarithm of a number with the specified base. sqrt( x: number ) -&gt; number Get the square root of a number. random() -&gt; number Get a random number between 0 and 1. round( x: number, digits?: number ) -&gt; number Round a number to the specified number of digits. sum( array: array ) -&gt; number Get the sum of an array of numbers. min( array: array ) -&gt; number Get the minimum value in an array of numbers. max( array: array ) -&gt; number Get the maximum value in an array of numbers. abs( x: number ) -&gt; number Get the absolute value of a number. pow( base: number, exponent: number ) -&gt; number Get the result of raising a base to an exponent. log10( x: number ) -&gt; number Get the base-10 logarithm of a number. sin( x: number ) -&gt; number Get the sine of a number. cos( x: number ) -&gt; number Get the cosine of a number. tan( x: number ) -&gt; number Get the tangent of a number. asin( x: number ) -&gt; number Get the arcsine of a number. acos( x: number ) -&gt; number Get the arccosine of a number. atan( x: number ) -&gt; number Get the arctangent of a number. floor( x: number ) -&gt; number Get the largest integer less than or equal to a number. ceil( x: number ) -&gt; number Get the smallest integer greater than or equal to a number. factorial( x: number ) -&gt; number Get the factorial of a number."},{"location":"language-features/#file","title":"file","text":"Function Description read( filename: str ) -&gt; str Read the contents of a file. write( filename: str, content: str ) -&gt; null Write content to a file. append( filename: str, content: str ) -&gt; null Append content to a file. exists( filename: str ) -&gt; bool Check if a file exists. delete( filename: str ) -&gt; null Delete a file. copy( source: str, destination: str ) -&gt; null Copy a file. move( source: str, destination: str ) -&gt; null Move a file. list( directory: str ) -&gt; array List files in a directory. size( filename: str ) -&gt; number Get the size of a file."},{"location":"language-features/#http","title":"http","text":"Function Description get( url: str ) -&gt; object{data, status} Make a GET request to a URL. post( url: str, data: str ) -&gt; object{data, status} Make a POST request to a URL with data. put( url: str, data: str ) -&gt; object{data, status} Make a PUT request to a URL with data. delete( url: str ) -&gt; object{data, status} Make a DELETE request to a URL. urlencode( data: str ) -&gt; str URL-encode a string. urldecode( data: str ) -&gt; str URL-decode a string."},{"location":"language-features/#time","title":"time","text":"Function Description time() -&gt; number Get the current time in seconds since the epoch. sleep( seconds: number ) -&gt; null Sleep for a specified number of seconds. format( time: number ) -&gt; str Format a time value as a string. timezone_offset() -&gt; number Get the timezone offset in seconds."},{"location":"language-features/#string","title":"string","text":"Function Description split( string: str, separator: str ) -&gt; array Split a string by a separator. join( array: array, separator: str ) -&gt; str Join an array of strings with a separator. replace( string: str, search: str, replace: str ) -&gt; str Replace occurrences of a substring in a string. contains( string: str, search: str ) -&gt; bool Check if a string contains a substring."},{"location":"language-features/#array","title":"array","text":"Function Description push( array: array, value: any ) -&gt; null Add a value to the end of an array. pop( array: array ) -&gt; any Remove and return the last value from an array. shift( array: array ) -&gt; any Remove and return the first value from an array. unshift( array: array, value: any ) -&gt; null Add a value to the beginning of an array. sort( array: array ) -&gt; null Sort an array of numbers."},{"location":"language-features/#os","title":"os","text":"Function Description cwd() -&gt; str Get the current working directory. chdir( directory: str ) -&gt; null Change the current working directory. env( variable?: str ) -&gt; str | array[str] Get the value of an environment variable or all environment variables if no variable is specified. exec( command: str ) -&gt; object{output, status} Executes a system command and return the result."},{"location":"language-features/#json","title":"json","text":"Function Description parse( string: str ) -&gt; object Parse a string into a JSON object. stringify( object: object ) -&gt; str Turn a JSON object into a string."},{"location":"language-features/#classes","title":"Classes","text":"<p>Classes can be made using the <code>class</code> keyword:</p> <pre><code># They can have initializeable arguments\nclass Clock {\n    time: Number # Type hints are done using a colon\n}\n\nlet clock = Clock(0);\nclock.time = 100;\n\nprint(clock); # Output: 100\n</code></pre> <pre><code># They can also have pre-declared variables\nclass Clock {\n    time: Number = 0\n}\n\nprint(clock.time); # Output: 0\n\nclock.time = 100; # This will set the value permanently\n\nprint(clock); # Output: 100\n</code></pre> <pre><code># They can also have functions\nclass Maths {\n    func sum(a: Number, b: Number) {\n        return a + b;\n    }\n}\n\nprint(Maths.sum(10, 5)); # Output: 15\n</code></pre> <p>Own property access</p> <p>Currently, there is no way to access properties from the class from within its own functions (like <code>self</code> (python) or <code>this</code> (javascript))</p>"},{"location":"language-features/#enums","title":"Enums","text":"<p>Enums can be created using <code>enum</code>:</p> <pre><code># They can also have pre-declared variables\nenum Colors {\n    green\n    blue\n    red\n    white\n    yellow\n}\n\nprint(Colors.green); # Output: green\n</code></pre>"},{"location":"language-features/#operators","title":"Operators","text":"<p>Currently, all supported operators are:</p>"},{"location":"language-features/#arithmetic","title":"Arithmetic","text":"<ul> <li>+ Add</li> <li>- Subtract</li> <li>* Multiply</li> <li>/ Divide</li> <li>% Modulo</li> <li>** Power</li> </ul> <p>+ Operator</p> <p>The <code>+ (Add)</code> operator can also be used to concatenate strings, arrays and dictionaries/objects.</p>"},{"location":"language-features/#bitwise","title":"Bitwise","text":"<ul> <li>^ XOR</li> <li>&amp; AND</li> <li>| OR</li> <li>&lt;&lt; Left shift</li> <li>&gt;&gt; Right shift</li> </ul>"},{"location":"language-features/#logical","title":"Logical","text":"<ul> <li>&amp;&amp; And</li> <li>|| Or</li> </ul>"},{"location":"language-features/#comparison","title":"Comparison","text":"<ul> <li>== Equals</li> <li>!= Not equals</li> <li>&lt; Smaller</li> <li>&gt; Greater</li> <li>&lt;= Smaller or equal</li> <li>&gt;= Greater or equal</li> </ul>"},{"location":"language-features/#in-place","title":"In place","text":"<ul> <li>++ Add 1</li> <li>-- Subtract 1</li> <li>+= Add</li> <li>-= Subtract</li> <li>*= Multiply</li> <li>/= Divide</li> <li>%= Modulo</li> <li>^= XOR</li> <li>&amp;= AND</li> <li>|= OR</li> </ul> <p><code>++</code> and <code>--</code></p> <p>The <code>++</code> and <code>--</code> operators are used before the variable (example: <code>++variable</code>).</p>"},{"location":"language-features/#control-structures","title":"Control structures","text":""},{"location":"language-features/#ifelse-statements","title":"If/Else statements","text":"<pre><code>if (1 == 1) {\n    print(\"This will be printed\");\n} else {\n    print(\"This will not be printed\");\n}\n</code></pre>"},{"location":"language-features/#loops","title":"Loops","text":"<p>Infinite loops, while loops and for loops are supported.</p> <p>For Loops</p> <p>For loops can only iterate over arrays.</p> <pre><code>loop {\n    print(\"This will be printed forever!\");\n}\n\nlet value = 0;\nconst threshold = 3;\nwhile (value &lt; threshold) {\n    value = value + 1\n\n    print(value);\n}\n\n# For loops work by going over an iterator\nfor i in range(5) {\n    print(i)\n}\n</code></pre> <p>Supported keywords are:</p> <ul> <li>break: Exit the loop</li> <li>continue: Skip to the next loop iteration</li> </ul>"},{"location":"packages/","title":"Packages","text":"<p>Eryx has its own package index, the Eryx Package Index (EPI, pronounced eepy) and a package manager built into its CLI, accessible with:</p> <pre><code>eryx package &lt;subcommand&gt;\n\nAvailable 'package' commands:\n    install             Install a package\n    uninstall           Uninstall a package\n    list                List all installed packages\n    upload              Upload a package\n    delete              Delete a package\n</code></pre> <p>Default package repo</p> <p>The default package repository is https://eryx-packages.shymike.tech.</p>"},{"location":"packages/#installing-packages","title":"Installing packages","text":"<p>To install a package, use <code>eryx package install &lt;name&gt;</code> and to install a specific version of a package, use <code>eryx package install &lt;name&gt;@&lt;version&gt;</code>.</p>"},{"location":"packages/#developing-a-package","title":"Developing a package","text":""},{"location":"packages/#package-structure","title":"Package Structure","text":"<p>The minimum package structure is:</p> <pre><code>&lt;folder&gt;\n \u251c\u2500\u2500 main.eryx\n \u251c\u2500\u2500 package.toml\n \u2514\u2500\u2500 README.md\n</code></pre> <p>Folder name</p> <p>The folder name does not matter, the name is set in the <code>package.toml</code> file.</p>"},{"location":"packages/#package-files","title":"Package Files","text":"<ul> <li><code>main.eryx</code> - This is the package's entrypoint, set up all main functions and values that you want to be importable here.</li> <li><code>README.md</code> - This is where the big package description is, it's displayed on the package's page.</li> <li><code>package.toml</code> - This is where all of the package configuration is, it requires the format bellow:</li> </ul> <pre><code>[package]\nname=\"&lt;name&gt;\"\nversion=\"&lt;version&gt;\"\ndescription=\"&lt;description&gt;\"\n</code></pre> <p>README file</p> <p>All Eryx packages must contain a <code>README.md</code>.</p>"},{"location":"packages/#uploading-packages","title":"Uploading Packages","text":"<p>Packages can be uploaded to the EPI with:</p> <pre><code>eryx package upload \"&lt;package-folder&gt;\"\n</code></pre> <p>This will ask you for an API key (you will only have to do this once):</p> <pre><code>Please visit the following url to get your API key:\nhttps://eryx-packages.shymike.tech/dashboard\n\nAPI Key:\n</code></pre> <p>After entering your API key, the package will be uploaded and available at:</p> <p><code>https://eryx-packages.shymike.tech/package/&lt;package-name&gt;</code></p> <p>And you can install it using:</p> <pre><code>eryx package install &lt;package-name&gt;\n</code></pre> <p>or</p> <pre><code>eryx package install  &lt;package-name&gt;@&lt;package-version&gt;\n</code></pre>"}]}